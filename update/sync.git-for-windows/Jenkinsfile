
def withGitCred

def shouldProceed = false
def remoteVersion = ""

pipeline {
  agent any

  triggers {
    cron("H 0 * * 3,6")
  }

  stages {
    stage("Checkout original repo") {
      steps {
        script {
          withGitCred = load("../common/methods/withGitCred.groovy")

          if (!fileExists("g4w")) {
            withGitCred("git clone --depth 1 git@gitee.com:git-installer/git-for-windows.git g4w")
          } else {
            dir("g4w") {
              withGitCred("git pull -r")
            }
          }
        }
      }
    }

    stage("Compare version") {
      steps {
        script {
          dir("g4w") {
            def version = readFile(file: '.version').trim()
            def json = readJSON text: new URL("https://api.github.com/repos/git-for-windows/git/releases").newReader().text;
            remoteVersion = json[0].id.toString();
            shouldProceed = (remoteVersion != version)
          }
        }
      }
    }

    stage("Update") {
      when { expression {  shouldProceed } }

      steps {
        script {
          dir("g4w") {
            def assets = readJSON text: new URL("https://api.github.com/repos/git-for-windows/git/releases/${remoteVersion}/assets").newReader().text
        
            assets.each { asset ->
              def url = asset.browser_download_url
              if (url.endsWith(".exe") && !url.toLowerCase().contains("7z")) {
                echo "wget -nc ${asset.browser_download_url}"
              }
            }

            writeFile file: '.version', text: remoteVersion

            sh "git add ."
            sh "git commit -m 'update version ${remoteVersion}'"

            withGitCred("git push origin master")


          }
        }
      }
    }
  }
}
